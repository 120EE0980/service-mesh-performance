syntax = "proto3";
package SMPS;

import "google/protobuf/timestamp.proto";

message PerformanceTestConfig {

    message Client {
        
        enum Protocol {
            http = 0;
            tcp = 1;
            grpc = 2;
        }
        
        
        bool internal = 1;
        string endpoint_url = 2;
        Protocol protocol = 3;
        int32 connections = 4;
        int64 rps = 5;
    }

    // Spec version
    string smps_version = 1;
    string id = 2;
    map labels = 3;

    repeated Client client = 4;
    google.protobuf.Duration duration = 5;
}

message PerformanceTestResult {
    
    // latency histogram in ms and average
    message Latency {
        int32 min = 1;
        int32 average = 2;
        int32 p50 = 3;
        int32 p90 = 4;
        int32 p99 = 5;
        int32 max = 6;    
    }  

    // Spec version
    string smps_version = 1;
    string id = 2;
    map labels = 3;
        
    // All times in UTC
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    Latency latencies_ms = 6;

    string details_uri = 7;
    string testId = 8;
    string meshConfigId = 9;
    string envId = 10;
    
}

message ServiceMeshConfig {

    message IngressGateway {
        int32 count = 1;
        // cpu in mCores
        int32 cpu_mCores = 2;
        // memory in MB
        int32 mem_mb = 3;
        // traffic sent thru ingress gateway
        int32 rps = 4;
        // Total bytes sent thru ingress
        int32 bps = 5;
    }
    
    message Sidecar {
        int32 count = 1;
        // cpu used by all sidecars except ingress / egress
        int32 cpu_mCores = 2;
        int32 mem_mb = 3;
        // Total rps traversing all sidecars
        int32 rps = 4;
        // Total bytes sent thru sidecars
        int32 bps = 5;
    }
    
    message MeshTelemetry {
        int32 count = 1;
        // cpu used by all mesh_telemetry pods
        int32 cpu_mCores = 2;
        int32 mem_mb = 3;
        // Total rps traversing all proxies (sidecars+ingress+egress)
        int32 rps = 4;
    }
    
    message MeshPolicy {
        int32 count = 1;
        // cpu used by all mesh_policy pods
        int32 cpu_mCores = 2;
        int32 mem_mb = 3;
        // Total rps traversing all proxies (sidecars+ingress+egress)
        int32 rps = 4;
        int32 cache_hit_rate = 5;
    }
    
    message MeshControlPlane {
        int32 count = 1;
        // cpu used by mesh_pilot pods
        int32 cpu_mCores = 2;
        int32 mem_mb = 3;
        int32 endpoints = 4;
        // services + service entries
        int32 services = 5;  
        int32 sidecars = 6;
        int32 virtual_services = 7;
        int32 destination_rules = 8;
        // how long does it take a listener change to propagate to 90% proxies
        int32 lds_latency_ms = 9;
        // how long does it take for cluster change to propagate to 90% proxies
        int32 cds_latency_ms = 10;
    }

    string smps_version = 1;
    string id = 2;
    map labels = 3;
    
    IngressGateway ingress_gateway = 4;
    Sidecar sidecar = 5;
    MeshTelemetry mesh_telemetry = 6;
    MeshPolicy mesh_policy = 7;
    MeshControlPlane mesh_control_plane = 8;      
            
    bool mesh_policy_enabled = 9;
    bool mesh_telemetry_enabled = 10;
    bool mtls_enabled = 11;
    int32 proxy_concurrency = 12;  

    string mesh_build = 13;
    string proxy_build = 14;
    string exp_group_uuid = 15;
    string exp_uuid = 16;
    string profile = 17;
   
}

message EnvironmentConfig {
    
    message Node {
        string type = 1;
        int32 cores = 2;
        int64 mem_mb = 3;
    }

    message IndividualWorkload {
        string name = 1;
        int32 count = 2;
        int32 cpu_mCores = 3;
        int32 mem_mb = 4;
    }

    string smps_version = 1;
    string id = 2;
    map labels = 3;
    
    string kubernetes_version = 4;
    repeated Node node = 5;
    repeated IndividualWorkload individual_workloads = 6;
}